package workflows

import gwf.util.task.generic.GenericAction
import gwf.util.task.sql.ExecuteSql
import gwf.workflows.data.JaxbXmlData
import gwf.workflows.data.JsonData
import gwf.workflows.data.XmlData
import gwf.workflows.data.YamlData
import gwf.workflows.sample.bean.SampleLocal
import org.jdbi.v3.core.statement.SqlLogger
import org.jdbi.v3.core.statement.StatementContext

logger.info 'Workflow found in workflows'

wrapExecution {
    logger.info "wrapper start"
    it.proceed()
    logger.info "wrapper stop"
}

executor {
    properties.TEST = 'Blubb'
}

env.BLUBB = "abc"

tasks {

    task(GenericAction) {
        logger.info "$name configured"

        action {
            url "someFile.txt" withInputStream {
                it.eachLine {
                    line -> logger.info line
                }
            }
        }

        Map<Class<?>, String> loadFiles = [:]
        loadFiles.put(String, "data/data.txt")
        loadFiles.put(JsonData, "data/data.json")
        loadFiles.put(XmlData, "data/data.xml")
        loadFiles.put(JaxbXmlData, "data/data.jaxb.xml")
        loadFiles.put(YamlData, "data/data.yaml")

        loadFiles.each { file ->
            action {
                logger.info load(file.key, file.value).toString()
            }
        }
    }

    task("task 2", GenericAction) {

        action {
            logger.info "$name first action"
        }

        action {
            logger.info "$name second action"
            env.test = "property added by $name"
        }

        logger.info "$name configured"
    }
}

inline "sub/inlineWorkflow.wfl"

tasks {
    task("sql task", ExecuteSql) {

        jdbi {
            setSqlLogger(new SqlLogger() {
                @Override
                void logAfterExecution(StatementContext context) {
                    logger.info "Custom jdbi execute: ${context.renderedSql}"
                }
            })
        }

        sql {
            /
                create table if not exists WF_USERS (
                    NAME varchar(255),
                    ADDRESS varchar(255)
                )
            /
        }

        sql {
            /
                insert into WF_USERS
                    (NAME, ADDRESS)
                    values ('Hubert', 'Hinterdupfing'),
                        ('Darth Vader', 'Deathstar')
            /
        }

        handle {
            def addresses = it.createQuery("select ADDRESS from WF_USERS")
                    .mapTo(String)
                    .list()

            logger.info "Addresses: $addresses"
        }

        selectBean(WfUser) {

            bind {
                name = 'Hubert'
            }

            define {
                table = 'WF_USERS'
            }

            "select NAME, ADDRESS from <table> where NAME = :name"
        }.then {
            it.each {
                user -> logger.info "selected $user.name from $user.address"
            }
        }

        logger.info "$name configured"
    }

    def bean = cdi SampleLocal

    task("print env", GenericAction) {
        logger.info "env (configuration): $env"
        action {
            logger.info "env (runtime): $env"
        }

        action {
            logger.info bean.sayHello()
        }
    }
}

class WfUser {
    String name
    String address
}
